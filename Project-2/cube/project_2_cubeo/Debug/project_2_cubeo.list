
project_2_cubeo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004950  08004950  00005950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049e0  080049e0  000059e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08004a40  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004a40  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfdd  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdb  00000000  00000000  00013069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00014d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  000158a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215cb  00000000  00000000  00016149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d197  00000000  00000000  00037714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf820  00000000  00000000  000448ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001140cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  00114110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001174a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004938 	.word	0x08004938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004938 	.word	0x08004938

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08e      	sub	sp, #56	@ 0x38
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb0e 	bl	8000bd2 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t raw_read;
  char msg[40];
  int sample_count = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	637b      	str	r3, [r7, #52]	@ 0x34
  int start_time = HAL_GetTick();
 80005ba:	f000 fb73 	bl	8000ca4 <HAL_GetTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	633b      	str	r3, [r7, #48]	@ 0x30
//  uint16_t interval = 0;
//  int flag = 0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f82d 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f921 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f8ef 	bl	80007ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ce:	f000 f889 	bl	80006e4 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
	{
	  /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1); 							// Start the ADC capture
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <main+0x68>)
 80005d4:	f000 fe7c 	bl	80012d0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); 	// Begin Reading A0 value
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	480d      	ldr	r0, [pc, #52]	@ (8000614 <main+0x68>)
 80005de:	f000 feda 	bl	8001396 <HAL_ADC_PollForConversion>
	  raw_read = HAL_ADC_GetValue(&hadc1);
 80005e2:	480c      	ldr	r0, [pc, #48]	@ (8000614 <main+0x68>)
 80005e4:	f000 ff66 	bl	80014b4 <HAL_ADC_GetValue>
 80005e8:	4603      	mov	r3, r0
 80005ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

//	  sample_count++;
	  sprintf(msg, "%hu\r\n", raw_read);			// Create a message to send over UART
 80005ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4909      	ldr	r1, [pc, #36]	@ (8000618 <main+0x6c>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fd00 	bl	8003ff8 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // Send message over UART
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x70>)
 800060c:	f003 f822 	bl	8003654 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1); 							// Start the ADC capture
 8000610:	bf00      	nop
 8000612:	e7de      	b.n	80005d2 <main+0x26>
 8000614:	20000078 	.word	0x20000078
 8000618:	08004950 	.word	0x08004950
 800061c:	200000dc 	.word	0x200000dc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	@ 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fd04 	bl	800403c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000646:	f001 fe31 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 f926 	bl	80008a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000654:	f001 fe0c 	bl	8002270 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000658:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <SystemClock_Config+0xc0>)
 800065a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800065e:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <SystemClock_Config+0xc0>)
 8000660:	f023 0318 	bic.w	r3, r3, #24
 8000664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000668:	2314      	movs	r3, #20
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	@ 0x60
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fe5b 	bl	8002358 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f8fa 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fa5b 	bl	8002b80 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d0:	f000 f8e6 	bl	80008a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d4:	f002 fe6e 	bl	80033b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d8:	bf00      	nop
 80006da:	3758      	adds	r7, #88	@ 0x58
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fa:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 80006fc:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <MX_ADC1_Init+0xc0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b21      	ldr	r3, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800071a:	2204      	movs	r2, #4
 800071c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 800075c:	f000 fc76 	bl	800104c <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f89b 	bl	80008a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_ADC1_Init+0xc4>)
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076e:	2306      	movs	r3, #6
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000776:	237f      	movs	r3, #127	@ 0x7f
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800077a:	2304      	movs	r3, #4
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4806      	ldr	r0, [pc, #24]	@ (80007a0 <MX_ADC1_Init+0xbc>)
 8000788:	f000 fea2 	bl	80014d0 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000792:	f000 f885 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000078 	.word	0x20000078
 80007a4:	50040000 	.word	0x50040000
 80007a8:	14f00020 	.word	0x14f00020

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 fee2 	bl	80035b8 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f851 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000dc 	.word	0x200000dc
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a10      	ldr	r2, [pc, #64]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0x90>)
 8000870:	f001 fce6 	bl	8002240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_GPIO_Init+0x90>)
 800088c:	f001 fb6e 	bl	8001f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000400 	.word	0x48000400

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x44>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x44>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09e      	sub	sp, #120	@ 0x78
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2254      	movs	r2, #84	@ 0x54
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f003 fb91 	bl	800403c <memset>
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <HAL_ADC_MspInit+0xc0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d143      	bne.n	80009ac <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000924:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000928:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800092a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800092e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000938:	2310      	movs	r3, #16
 800093a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800093c:	2307      	movs	r3, #7
 800093e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fb38 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800095e:	f7ff ff9f 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000968:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_ADC_MspInit+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000992:	2301      	movs	r3, #1
 8000994:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000996:	230b      	movs	r3, #11
 8000998:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f001 fae0 	bl	8001f6c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009ac:	bf00      	nop
 80009ae:	3778      	adds	r7, #120	@ 0x78
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	50040000 	.word	0x50040000
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09e      	sub	sp, #120	@ 0x78
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2254      	movs	r2, #84	@ 0x54
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fb2d 	bl	800403c <memset>
  if(huart->Instance==USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <HAL_UART_MspInit+0xcc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d148      	bne.n	8000a7e <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fae5 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ff4c 	bl	80008a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a24:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <HAL_UART_MspInit+0xd0>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a56:	f001 fa89 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 fa77 	bl	8001f6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a7e:	bf00      	nop
 8000a80:	3778      	adds	r7, #120	@ 0x78
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f8c9 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d207      	bcs.n	8000b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b20:	f003 fa94 	bl	800404c <__errno>
 8000b24:	4603      	mov	r3, r0
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	e009      	b.n	8000b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b36:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <_sbrk+0x64>)
 8000b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b42:	68fb      	ldr	r3, [r7, #12]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000c000 	.word	0x2000c000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	20000164 	.word	0x20000164
 8000b58:	200002b8 	.word	0x200002b8

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	@ (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fa53 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fcfb 	bl	80005ac <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	200002b4 	.word	0x200002b4

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>

08000bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f001 f991 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f80e 	bl	8000c04 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff fe5a 	bl	80008ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c10:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d023      	beq.n	8000c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_InitTick+0x70>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f98f 	bl	8001f52 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10f      	bne.n	8000c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d809      	bhi.n	8000c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f001 f967 	bl	8001f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_InitTick+0x74>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e007      	b.n	8000c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e004      	b.n	8000c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e001      	b.n	8000c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000168 	.word	0x20000168

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000168 	.word	0x20000168

08000cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3360      	adds	r3, #96	@ 0x60
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LL_ADC_SetOffset+0x44>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	4313      	orrs	r3, r2
 8000d54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	03fff000 	.word	0x03fff000

08000d6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3360      	adds	r3, #96	@ 0x60
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3360      	adds	r3, #96	@ 0x60
 8000da8:	461a      	mov	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3330      	adds	r3, #48	@ 0x30
 8000e04:	461a      	mov	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	211f      	movs	r1, #31
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	401a      	ands	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0e9b      	lsrs	r3, r3, #26
 8000e2c:	f003 011f 	and.w	r1, r3, #31
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	0e5b      	lsrs	r3, r3, #25
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	0d1b      	lsrs	r3, r3, #20
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	2107      	movs	r1, #7
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	401a      	ands	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	0d1b      	lsrs	r3, r3, #20
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	431a      	orrs	r2, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0318 	and.w	r3, r3, #24
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	400b      	ands	r3, r1
 8000ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	0007ffff 	.word	0x0007ffff

08000eec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6093      	str	r3, [r2, #8]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f24:	d101      	bne.n	8000f2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f74:	d101      	bne.n	8000f7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <LL_ADC_IsEnabled+0x18>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <LL_ADC_IsEnabled+0x1a>
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fe6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fea:	f043 0204 	orr.w	r2, r3, #4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b04      	cmp	r3, #4
 8001010:	d101      	bne.n	8001016 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b08      	cmp	r3, #8
 8001036:	d101      	bne.n	800103c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e126      	b.n	80012b4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001070:	2b00      	cmp	r3, #0
 8001072:	d109      	bne.n	8001088 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fc3d 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff3f 	bl	8000f10 <LL_ADC_IsDeepPowerDownEnabled>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff25 	bl	8000eec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff5a 	bl	8000f60 <LL_ADC_IsInternalRegulatorEnabled>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d115      	bne.n	80010de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff3e 	bl	8000f38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010bc:	4b7f      	ldr	r3, [pc, #508]	@ (80012bc <HAL_ADC_Init+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	099b      	lsrs	r3, r3, #6
 80010c2:	4a7f      	ldr	r2, [pc, #508]	@ (80012c0 <HAL_ADC_Init+0x274>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	3301      	adds	r3, #1
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f9      	bne.n	80010d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff3c 	bl	8000f60 <LL_ADC_IsInternalRegulatorEnabled>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	f043 0210 	orr.w	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff75 	bl	8000ffe <LL_ADC_REG_IsConversionOngoing>
 8001114:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80bf 	bne.w	80012a2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 80bb 	bne.w	80012a2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001130:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001134:	f043 0202 	orr.w	r2, r3, #2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff35 	bl	8000fb0 <LL_ADC_IsEnabled>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800114c:	485d      	ldr	r0, [pc, #372]	@ (80012c4 <HAL_ADC_Init+0x278>)
 800114e:	f7ff ff2f 	bl	8000fb0 <LL_ADC_IsEnabled>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4619      	mov	r1, r3
 800115e:	485a      	ldr	r0, [pc, #360]	@ (80012c8 <HAL_ADC_Init+0x27c>)
 8001160:	f7ff fdac 	bl	8000cbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e5b      	ldrb	r3, [r3, #25]
 8001168:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800116e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001174:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800117a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001182:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d106      	bne.n	80011a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	3b01      	subs	r3, #1
 8001198:	045b      	lsls	r3, r3, #17
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	4b42      	ldr	r3, [pc, #264]	@ (80012cc <HAL_ADC_Init+0x280>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	430b      	orrs	r3, r1
 80011ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff25 	bl	8001024 <LL_ADC_INJ_IsConversionOngoing>
 80011da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d13d      	bne.n	800125e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d13a      	bne.n	800125e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001204:	f023 0302 	bic.w	r3, r3, #2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	69b9      	ldr	r1, [r7, #24]
 800120e:	430b      	orrs	r3, r1
 8001210:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001218:	2b01      	cmp	r3, #1
 800121a:	d118      	bne.n	800124e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001232:	4311      	orrs	r1, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001238:	4311      	orrs	r1, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800123e:	430a      	orrs	r2, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	e007      	b.n	800125e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10c      	bne.n	8001280 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126c:	f023 010f 	bic.w	r1, r3, #15
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	631a      	str	r2, [r3, #48]	@ 0x30
 800127e:	e007      	b.n	8001290 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 020f 	bic.w	r2, r2, #15
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001294:	f023 0303 	bic.w	r3, r3, #3
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
 80012a0:	e007      	b.n	80012b2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	053e2d63 	.word	0x053e2d63
 80012c4:	50040000 	.word	0x50040000
 80012c8:	50040300 	.word	0x50040300
 80012cc:	fff0c007 	.word	0xfff0c007

080012d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe8e 	bl	8000ffe <LL_ADC_REG_IsConversionOngoing>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d14f      	bne.n	8001388 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_Start+0x26>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e04b      	b.n	800138e <HAL_ADC_Start+0xbe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fcc8 	bl	8001c94 <ADC_Enable>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d137      	bne.n	800137e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001312:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001316:	f023 0301 	bic.w	r3, r3, #1
 800131a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800132a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800132e:	d106      	bne.n	800133e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001334:	f023 0206 	bic.w	r2, r3, #6
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	659a      	str	r2, [r3, #88]	@ 0x58
 800133c:	e002      	b.n	8001344 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	221c      	movs	r2, #28
 800134a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe2d 	bl	8000fd6 <LL_ADC_REG_StartConversion>
 800137c:	e006      	b.n	800138c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001386:	e001      	b.n	800138c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001388:	2302      	movs	r3, #2
 800138a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d102      	bne.n	80013ae <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80013a8:	2308      	movs	r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e010      	b.n	80013d0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e06f      	b.n	80014ac <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80013cc:	2304      	movs	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013d0:	f7ff fc68 	bl	8000ca4 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013d6:	e021      	b.n	800141c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013de:	d01d      	beq.n	800141c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80013e0:	f7ff fc60 	bl	8000ca4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d302      	bcc.n	80013f6 <HAL_ADC_PollForConversion+0x60>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d112      	bne.n	800141c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10b      	bne.n	800141c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001408:	f043 0204 	orr.w	r2, r3, #4
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e047      	b.n	80014ac <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0d6      	beq.n	80013d8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fcc7 	bl	8000dce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01c      	beq.n	8001480 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e5b      	ldrb	r3, [r3, #25]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b08      	cmp	r3, #8
 800145a:	d111      	bne.n	8001480 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b08      	cmp	r3, #8
 800148c:	d104      	bne.n	8001498 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2208      	movs	r2, #8
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e008      	b.n	80014aa <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0b6      	sub	sp, #216	@ 0xd8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x22>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e3bb      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x79a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd7d 	bl	8000ffe <LL_ADC_REG_IsConversionOngoing>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 83a0 	bne.w	8001c4c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d824      	bhi.n	8001566 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	3b02      	subs	r3, #2
 8001522:	2b03      	cmp	r3, #3
 8001524:	d81b      	bhi.n	800155e <HAL_ADC_ConfigChannel+0x8e>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <HAL_ADC_ConfigChannel+0x5c>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001545 	.word	0x08001545
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001555 	.word	0x08001555
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800153c:	230c      	movs	r3, #12
 800153e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001542:	e010      	b.n	8001566 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800154a:	e00c      	b.n	8001566 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800154c:	2318      	movs	r3, #24
 800154e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001552:	e008      	b.n	8001566 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800155c:	e003      	b.n	8001566 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800155e:	2306      	movs	r3, #6
 8001560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001564:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001574:	f7ff fc3e 	bl	8000df4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd3e 	bl	8000ffe <LL_ADC_REG_IsConversionOngoing>
 8001582:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd4a 	bl	8001024 <LL_ADC_INJ_IsConversionOngoing>
 8001590:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 81a4 	bne.w	80018e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800159e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 819f 	bne.w	80018e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7ff fc49 	bl	8000e4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d00a      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6919      	ldr	r1, [r3, #16]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80015ec:	f7ff fb9a 	bl	8000d24 <LL_ADC_SetOffset>
 80015f0:	e179      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fbb7 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <HAL_ADC_ConfigChannel+0x14e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fbac 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	0e9b      	lsrs	r3, r3, #26
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	e01e      	b.n	800165c <HAL_ADC_ConfigChannel+0x18c>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fba1 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800163c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e004      	b.n	800165a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x1a4>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0e9b      	lsrs	r3, r3, #26
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	e018      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x1d6>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001680:	fa93 f3a3 	rbit	r3, r3
 8001684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800168c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001698:	2320      	movs	r3, #32
 800169a:	e004      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800169c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d106      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb70 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fb54 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10a      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x214>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fb49 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	0e9b      	lsrs	r3, r3, #26
 80016de:	f003 021f 	and.w	r2, r3, #31
 80016e2:	e01e      	b.n	8001722 <HAL_ADC_ConfigChannel+0x252>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2101      	movs	r1, #1
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb3e 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800170a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001712:	2320      	movs	r3, #32
 8001714:	e004      	b.n	8001720 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_ADC_ConfigChannel+0x26a>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	e018      	b.n	800176c <HAL_ADC_ConfigChannel+0x29c>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800174e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001752:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800175e:	2320      	movs	r3, #32
 8001760:	e004      	b.n	800176c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800176c:	429a      	cmp	r2, r3
 800176e:	d106      	bne.n	800177e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb0d 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2102      	movs	r1, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff faf1 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x2da>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fae6 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	0e9b      	lsrs	r3, r3, #26
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	e01e      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x318>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fadb 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80017c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80017d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80017d8:	2320      	movs	r3, #32
 80017da:	e004      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80017dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x330>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	e014      	b.n	800182a <HAL_ADC_ConfigChannel+0x35a>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800180e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800181c:	2320      	movs	r3, #32
 800181e:	e004      	b.n	800182a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800182a:	429a      	cmp	r2, r3
 800182c:	d106      	bne.n	800183c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff faae 	bl	8000d98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2103      	movs	r1, #3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fa92 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10a      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x398>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2103      	movs	r1, #3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fa87 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	0e9b      	lsrs	r3, r3, #26
 8001862:	f003 021f 	and.w	r2, r3, #31
 8001866:	e017      	b.n	8001898 <HAL_ADC_ConfigChannel+0x3c8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2103      	movs	r1, #3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa7c 	bl	8000d6c <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001882:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800188a:	2320      	movs	r3, #32
 800188c:	e003      	b.n	8001896 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800188e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x3e0>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e9b      	lsrs	r3, r3, #26
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	e011      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x404>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80018be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80018c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80018c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e003      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80018cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d106      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	2103      	movs	r1, #3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa59 	bl	8000d98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fb60 	bl	8000fb0 <LL_ADC_IsEnabled>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8140 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	461a      	mov	r2, r3
 8001906:	f7ff facd 	bl	8000ea4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4a8f      	ldr	r2, [pc, #572]	@ (8001b4c <HAL_ADC_ConfigChannel+0x67c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	f040 8131 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10b      	bne.n	800193e <HAL_ADC_ConfigChannel+0x46e>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	3301      	adds	r3, #1
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b09      	cmp	r3, #9
 8001934:	bf94      	ite	ls
 8001936:	2301      	movls	r3, #1
 8001938:	2300      	movhi	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	e019      	b.n	8001972 <HAL_ADC_ConfigChannel+0x4a2>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001956:	2320      	movs	r3, #32
 8001958:	e003      	b.n	8001962 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800195a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2b09      	cmp	r3, #9
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001972:	2b00      	cmp	r3, #0
 8001974:	d079      	beq.n	8001a6a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d107      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x4c2>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	3301      	adds	r3, #1
 800198a:	069b      	lsls	r3, r3, #26
 800198c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001990:	e015      	b.n	80019be <HAL_ADC_ConfigChannel+0x4ee>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80019a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80019a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80019aa:	2320      	movs	r3, #32
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80019ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	069b      	lsls	r3, r3, #26
 80019ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_ADC_ConfigChannel+0x50e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	3301      	adds	r3, #1
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	e017      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x53e>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80019ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80019f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80019f6:	2320      	movs	r3, #32
 80019f8:	e003      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80019fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	ea42 0103 	orr.w	r1, r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x564>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 021f 	and.w	r2, r3, #31
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	e018      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x596>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e003      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 021f 	and.w	r2, r3, #31
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a66:	430b      	orrs	r3, r1
 8001a68:	e081      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x5b6>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0e9b      	lsrs	r3, r3, #26
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	069b      	lsls	r3, r3, #26
 8001a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a84:	e015      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x5e2>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	e003      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	069b      	lsls	r3, r3, #26
 8001aae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x602>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	e017      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x632>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	61bb      	str	r3, [r7, #24]
  return result;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2101      	movs	r1, #1
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	ea42 0103 	orr.w	r1, r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x65e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f003 021f 	and.w	r2, r3, #31
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	3b1e      	subs	r3, #30
 8001b26:	051b      	lsls	r3, r3, #20
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	e01e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x69c>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  return result;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e006      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x688>
 8001b4a:	bf00      	nop
 8001b4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 021f 	and.w	r2, r3, #31
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	051b      	lsls	r3, r3, #20
 8001b68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff f96a 	bl	8000e4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_ADC_ConfigChannel+0x7a4>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d06c      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b84:	483c      	ldr	r0, [pc, #240]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7a8>)
 8001b86:	f7ff f8bf 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001b8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3a      	ldr	r2, [pc, #232]	@ (8001c7c <HAL_ADC_ConfigChannel+0x7ac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d127      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d121      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a35      	ldr	r2, [pc, #212]	@ (8001c80 <HAL_ADC_ConfigChannel+0x7b0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d157      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482f      	ldr	r0, [pc, #188]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7a8>)
 8001bba:	f7ff f892 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bbe:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_ADC_ConfigChannel+0x7b4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	099b      	lsrs	r3, r3, #6
 8001bc4:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_ADC_ConfigChannel+0x7b8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001be6:	e03a      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a27      	ldr	r2, [pc, #156]	@ (8001c8c <HAL_ADC_ConfigChannel+0x7bc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d113      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1f      	ldr	r2, [pc, #124]	@ (8001c80 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d12a      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c10:	4619      	mov	r1, r3
 8001c12:	4819      	ldr	r0, [pc, #100]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c14:	f7ff f865 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c18:	e021      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d11c      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d116      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d111      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <HAL_ADC_ConfigChannel+0x7a8>)
 8001c46:	f7ff f84c 	bl	8000ce2 <LL_ADC_SetCommonPathInternalCh>
 8001c4a:	e008      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	37d8      	adds	r7, #216	@ 0xd8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	80080000 	.word	0x80080000
 8001c78:	50040300 	.word	0x50040300
 8001c7c:	c7520000 	.word	0xc7520000
 8001c80:	50040000 	.word	0x50040000
 8001c84:	20000000 	.word	0x20000000
 8001c88:	053e2d63 	.word	0x053e2d63
 8001c8c:	cb840000 	.word	0xcb840000
 8001c90:	80000001 	.word	0x80000001

08001c94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f983 	bl	8000fb0 <LL_ADC_IsEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d169      	bne.n	8001d84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <ADC_Enable+0xfc>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e055      	b.n	8001d86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f952 	bl	8000f88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ce4:	482b      	ldr	r0, [pc, #172]	@ (8001d94 <ADC_Enable+0x100>)
 8001ce6:	f7ff f80f 	bl	8000d08 <LL_ADC_GetCommonPathInternalCh>
 8001cea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <ADC_Enable+0x104>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	4a28      	ldr	r2, [pc, #160]	@ (8001d9c <ADC_Enable+0x108>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d0e:	e002      	b.n	8001d16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d1c:	f7fe ffc2 	bl	8000ca4 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d22:	e028      	b.n	8001d76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff f941 	bl	8000fb0 <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d104      	bne.n	8001d3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f925 	bl	8000f88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d3e:	f7fe ffb1 	bl	8000ca4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d914      	bls.n	8001d76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d00d      	beq.n	8001d76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5e:	f043 0210 	orr.w	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e007      	b.n	8001d86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d1cf      	bne.n	8001d24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	8000003f 	.word	0x8000003f
 8001d94:	50040300 	.word	0x50040300
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	053e2d63 	.word	0x053e2d63

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff5c 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffb0 	bl	8001ec0 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	e148      	b.n	800220e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 813a 	beq.w	8002208 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x40>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8094 	beq.w	8002208 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b52      	ldr	r3, [pc, #328]	@ (800222c <HAL_GPIO_Init+0x2c0>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e4:	4a51      	ldr	r2, [pc, #324]	@ (800222c <HAL_GPIO_Init+0x2c0>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ec:	4b4f      	ldr	r3, [pc, #316]	@ (800222c <HAL_GPIO_Init+0x2c0>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002230 <HAL_GPIO_Init+0x2c4>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1d4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a43      	ldr	r2, [pc, #268]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1d0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a42      	ldr	r2, [pc, #264]	@ (8002238 <HAL_GPIO_Init+0x2cc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1cc>
 8002134:	2302      	movs	r3, #2
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1d6>
 8002138:	2307      	movs	r3, #7
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1d6>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1d6>
 8002140:	2300      	movs	r3, #0
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002152:	4937      	ldr	r1, [pc, #220]	@ (8002230 <HAL_GPIO_Init+0x2c4>)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002160:	4b36      	ldr	r3, [pc, #216]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002184:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021b4:	4b21      	ldr	r3, [pc, #132]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021d8:	4a18      	ldr	r2, [pc, #96]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002202:	4a0e      	ldr	r2, [pc, #56]	@ (800223c <HAL_GPIO_Init+0x2d0>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f aeaf 	bne.w	8001f7c <HAL_GPIO_Init+0x10>
  }
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	48000400 	.word	0x48000400
 8002238:	48000800 	.word	0x48000800
 800223c:	40010400 	.word	0x40010400

08002240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
 800224c:	4613      	mov	r3, r2
 800224e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002250:	787b      	ldrb	r3, [r7, #1]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800225c:	e002      	b.n	8002264 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a04      	ldr	r2, [pc, #16]	@ (800228c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227e:	6013      	str	r3, [r2, #0]
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40007000 	.word	0x40007000

08002290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ba:	d130      	bne.n	800231e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c8:	d038      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022d2:	4a1e      	ldr	r2, [pc, #120]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022da:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2232      	movs	r2, #50	@ 0x32
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	e002      	b.n	80022f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002304:	d102      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f2      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230c:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002318:	d110      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00f      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232a:	d007      	beq.n	800233c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002334:	4a05      	ldr	r2, [pc, #20]	@ (800234c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83

08002358 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f000 bc02 	b.w	8002b70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236c:	4b96      	ldr	r3, [pc, #600]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002376:	4b94      	ldr	r3, [pc, #592]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80e4 	beq.w	8002556 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4c>
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	f040 808b 	bne.w	80024b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	f040 8087 	bne.w	80024b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a4:	4b88      	ldr	r3, [pc, #544]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x64>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e3d9      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	4b81      	ldr	r3, [pc, #516]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_RCC_OscConfig+0x7e>
 80023cc:	4b7e      	ldr	r3, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d4:	e005      	b.n	80023e2 <HAL_RCC_OscConfig+0x8a>
 80023d6:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d223      	bcs.n	800242e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd8c 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3ba      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b73      	ldr	r3, [pc, #460]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a72      	ldr	r2, [pc, #456]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b70      	ldr	r3, [pc, #448]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	496d      	ldr	r1, [pc, #436]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b6b      	ldr	r3, [pc, #428]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	4968      	ldr	r1, [pc, #416]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e025      	b.n	800247a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242e:	4b66      	ldr	r3, [pc, #408]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4960      	ldr	r1, [pc, #384]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244c:	4b5e      	ldr	r3, [pc, #376]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	495b      	ldr	r1, [pc, #364]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fd4c 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e37a      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247a:	f000 fc81 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b51      	ldr	r3, [pc, #324]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4950      	ldr	r1, [pc, #320]	@ (80025cc <HAL_RCC_OscConfig+0x274>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a4e      	ldr	r2, [pc, #312]	@ (80025d0 <HAL_RCC_OscConfig+0x278>)
 8002498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800249a:	4b4e      	ldr	r3, [pc, #312]	@ (80025d4 <HAL_RCC_OscConfig+0x27c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fbb0 	bl	8000c04 <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d052      	beq.n	8002554 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	e35e      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d032      	beq.n	8002520 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ba:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a42      	ldr	r2, [pc, #264]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fbed 	bl	8000ca4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ce:	f7fe fbe9 	bl	8000ca4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e347      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ec:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a35      	ldr	r2, [pc, #212]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4930      	ldr	r1, [pc, #192]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	492b      	ldr	r1, [pc, #172]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
 800251e:	e01a      	b.n	8002556 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002520:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252c:	f7fe fbba 	bl	8000ca4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7fe fbb6 	bl	8000ca4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e314      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1dc>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d073      	beq.n	800264a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x21c>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d10e      	bne.n	800258c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10b      	bne.n	800258c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d063      	beq.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d15f      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e2f1      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x24c>
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e025      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025ac:	d114      	bne.n	80025d8 <HAL_RCC_OscConfig+0x280>
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a02      	ldr	r2, [pc, #8]	@ (80025c8 <HAL_RCC_OscConfig+0x270>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x298>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08004958 	.word	0x08004958
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004
 80025d8:	4ba0      	ldr	r3, [pc, #640]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a9f      	ldr	r2, [pc, #636]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b9d      	ldr	r3, [pc, #628]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a9c      	ldr	r2, [pc, #624]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb54 	bl	8000ca4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fb50 	bl	8000ca4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2ae      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4b92      	ldr	r3, [pc, #584]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2a8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fb40 	bl	8000ca4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fb3c 	bl	8000ca4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e29a      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4b88      	ldr	r3, [pc, #544]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d0>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x310>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d119      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d116      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b7c      	ldr	r3, [pc, #496]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x328>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e277      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b76      	ldr	r3, [pc, #472]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	4973      	ldr	r1, [pc, #460]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e040      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269e:	4b6f      	ldr	r3, [pc, #444]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6e      	ldr	r2, [pc, #440]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fafb 	bl	8000ca4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe faf7 	bl	8000ca4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e255      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	4b65      	ldr	r3, [pc, #404]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b62      	ldr	r3, [pc, #392]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	495f      	ldr	r1, [pc, #380]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5c      	ldr	r2, [pc, #368]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fad7 	bl	8000ca4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fad3 	bl	8000ca4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e231      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4b53      	ldr	r3, [pc, #332]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03c      	beq.n	800279e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b4b      	ldr	r3, [pc, #300]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002732:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fab2 	bl	8000ca4 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe faae 	bl	8000ca4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e20c      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCC_OscConfig+0x3ec>
 8002764:	e01b      	b.n	800279e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276c:	4a3b      	ldr	r2, [pc, #236]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fa95 	bl	8000ca4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe fa91 	bl	8000ca4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e1ef      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b0:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027c8:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fa58 	bl	8000ca4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fa54 	bl	8000ca4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1b2      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x508>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800281e:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800282e:	e029      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d115      	bne.n	8002864 <HAL_RCC_OscConfig+0x50c>
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283e:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	4a03      	ldr	r2, [pc, #12]	@ (800285c <HAL_RCC_OscConfig+0x504>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x52c>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	40007000 	.word	0x40007000
 8002864:	4b9a      	ldr	r3, [pc, #616]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a99      	ldr	r2, [pc, #612]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002874:	4b96      	ldr	r3, [pc, #600]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a95      	ldr	r2, [pc, #596]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fa0a 	bl	8000ca4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fa06 	bl	8000ca4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e162      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028aa:	4b89      	ldr	r3, [pc, #548]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCC_OscConfig+0x53c>
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe f9f3 	bl	8000ca4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe f9ef 	bl	8000ca4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e14b      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ed      	bne.n	80028c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4b78      	ldr	r3, [pc, #480]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	4a77      	ldr	r2, [pc, #476]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03c      	beq.n	800297e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 800290e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002912:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe f9c2 	bl	8000ca4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002924:	f7fe f9be 	bl	8000ca4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e11c      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x5cc>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002946:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800294c:	4a60      	ldr	r2, [pc, #384]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe f9a5 	bl	8000ca4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fe f9a1 	bl	8000ca4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0ff      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	4b57      	ldr	r3, [pc, #348]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80f3 	beq.w	8002b6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 80c9 	bne.w	8002b24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002992:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d12c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	3b01      	subs	r3, #1
 80029b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d123      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d11b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d113      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d06b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d062      	beq.n	8002acc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a06:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0ac      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a22:	f7fe f93f 	bl	8000ca4 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe f93b 	bl	8000ca4 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e099      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b21      	ldr	r3, [pc, #132]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_RCC_OscConfig+0x77c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a62:	0212      	lsls	r2, r2, #8
 8002a64:	4311      	orrs	r1, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	4311      	orrs	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a76:	0852      	lsrs	r2, r2, #1
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0652      	lsls	r2, r2, #25
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a82:	06d2      	lsls	r2, r2, #27
 8002a84:	430a      	orrs	r2, r1
 8002a86:	4912      	ldr	r1, [pc, #72]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa4:	f7fe f8fe 	bl	8000ca4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7fe f8fa 	bl	8000ca4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCC_OscConfig+0x778>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aca:	e050      	b.n	8002b6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04f      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d144      	bne.n	8002b6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae4:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af0:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a20      	ldr	r2, [pc, #128]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002afc:	f7fe f8d2 	bl	8000ca4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe f8ce 	bl	8000ca4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e02c      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x7ac>
 8002b22:	e024      	b.n	8002b6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d01f      	beq.n	8002b6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe f8b5 	bl	8000ca4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe f8b1 	bl	8000ca4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	4905      	ldr	r1, [pc, #20]	@ (8002b78 <HAL_RCC_OscConfig+0x820>)
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e001      	b.n	8002b6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	feeefffc 	.word	0xfeeefffc

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0e7      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b75      	ldr	r3, [pc, #468]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b72      	ldr	r3, [pc, #456]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4970      	ldr	r1, [pc, #448]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0cf      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b66      	ldr	r3, [pc, #408]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d908      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b63      	ldr	r3, [pc, #396]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4960      	ldr	r1, [pc, #384]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04c      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b5a      	ldr	r3, [pc, #360]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d121      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0a6      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1e:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d115      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e09a      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c36:	4b4e      	ldr	r3, [pc, #312]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e08e      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c46:	4b4a      	ldr	r3, [pc, #296]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e086      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4943      	ldr	r1, [pc, #268]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7fe f81c 	bl	8000ca4 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe f818 	bl	8000ca4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e06e      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b3a      	ldr	r3, [pc, #232]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d208      	bcs.n	8002cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	492b      	ldr	r1, [pc, #172]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc6:	4b29      	ldr	r3, [pc, #164]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d210      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd4:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 0207 	bic.w	r2, r3, #7
 8002cdc:	4923      	ldr	r1, [pc, #140]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e036      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d02:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4918      	ldr	r1, [pc, #96]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4910      	ldr	r1, [pc, #64]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d34:	f000 f824 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	490b      	ldr	r1, [pc, #44]	@ (8002d74 <HAL_RCC_ClockConfig+0x1f4>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_RCC_ClockConfig+0x1f8>)
 8002d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_ClockConfig+0x1fc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd ff53 	bl	8000c04 <HAL_InitTick>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d62:	7afb      	ldrb	r3, [r7, #11]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08004958 	.word	0x08004958
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d98:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d121      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d11e      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc0:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e005      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df8:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e004      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e04:	4b23      	ldr	r3, [pc, #140]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d134      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d003      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xac>
 8002e24:	e005      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e28:	617b      	str	r3, [r7, #20]
      break;
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2e:	617b      	str	r3, [r7, #20]
      break;
 8002e30:	e002      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	617b      	str	r3, [r7, #20]
      break;
 8002e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e38:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	3301      	adds	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	fb03 f202 	mul.w	r2, r3, r2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0e5b      	lsrs	r3, r3, #25
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e78:	69bb      	ldr	r3, [r7, #24]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08004970 	.word	0x08004970
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4904      	ldr	r1, [pc, #16]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08004968 	.word	0x08004968

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ee0:	f7ff ffda 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08004968 	.word	0x08004968

08002f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f14:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f9b6 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
 8002f26:	e014      	b.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b25      	ldr	r3, [pc, #148]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2c:	4a24      	ldr	r2, [pc, #144]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f34:	4b22      	ldr	r3, [pc, #136]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f9a6 	bl	8002290 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d10b      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b80      	cmp	r3, #128	@ 0x80
 8002f5e:	d919      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f64:	d902      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e013      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e010      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	@ 0x80
 8002f76:	d902      	bls.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f78:	2303      	movs	r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e00a      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d102      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f84:	2302      	movs	r3, #2
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e004      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b70      	cmp	r3, #112	@ 0x70
 8002f8e:	d101      	bne.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	4909      	ldr	r1, [pc, #36]	@ (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa4:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d031      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fec:	d01a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ff2:	d814      	bhi.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ffc:	d10f      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4a5c      	ldr	r2, [pc, #368]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003008:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f9de 	bl	80033d4 <RCCEx_PLLSAI1_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	74fb      	strb	r3, [r7, #19]
      break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800302c:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303a:	494e      	ldr	r1, [pc, #312]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 809e 	beq.w	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305a:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	4a3f      	ldr	r2, [pc, #252]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	@ 0x58
 800307c:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308c:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003098:	f7fd fe04 	bl	8000ca4 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd fe00 	bl	8000ca4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	74fb      	strb	r3, [r7, #19]
        break;
 80030b2:	e005      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b4:	4b30      	ldr	r3, [pc, #192]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ef      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d15a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d019      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030e2:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310e:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fd fdc0 	bl	8000ca4 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	e00b      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fd fdbc 	bl	8000ca4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d902      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	74fb      	strb	r3, [r7, #19]
            break;
 800313e:	e006      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ec      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003162:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800316a:	e009      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003180:	7c7b      	ldrb	r3, [r7, #17]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b8a      	ldr	r3, [pc, #552]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a89      	ldr	r2, [pc, #548]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319e:	4b84      	ldr	r3, [pc, #528]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f023 0203 	bic.w	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4980      	ldr	r1, [pc, #512]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c0:	4b7b      	ldr	r3, [pc, #492]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f023 020c 	bic.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	4978      	ldr	r1, [pc, #480]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e2:	4b73      	ldr	r3, [pc, #460]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	496f      	ldr	r1, [pc, #444]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003204:	4b6a      	ldr	r3, [pc, #424]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	4967      	ldr	r1, [pc, #412]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003226:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	495e      	ldr	r1, [pc, #376]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003248:	4b59      	ldr	r3, [pc, #356]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	4956      	ldr	r1, [pc, #344]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800326a:	4b51      	ldr	r3, [pc, #324]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	494d      	ldr	r1, [pc, #308]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d028      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328c:	4b48      	ldr	r3, [pc, #288]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4945      	ldr	r1, [pc, #276]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032aa:	d106      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ac:	4b40      	ldr	r3, [pc, #256]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032b6:	60d3      	str	r3, [r2, #12]
 80032b8:	e011      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032c2:	d10c      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f882 	bl	80033d4 <RCCEx_PLLSAI1_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d028      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ea:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f8:	492d      	ldr	r1, [pc, #180]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003308:	d106      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a28      	ldr	r2, [pc, #160]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003314:	60d3      	str	r3, [r2, #12]
 8003316:	e011      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f853 	bl	80033d4 <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003356:	4916      	ldr	r1, [pc, #88]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f830 	bl	80033d4 <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003394:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	4904      	ldr	r1, [pc, #16]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a04      	ldr	r2, [pc, #16]	@ (80033d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e2:	4b74      	ldr	r3, [pc, #464]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ee:	4b71      	ldr	r3, [pc, #452]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0203 	and.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d10d      	bne.n	800341a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
       ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003406:	4b6b      	ldr	r3, [pc, #428]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	091b      	lsrs	r3, r3, #4
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
       ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d047      	beq.n	80034aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e044      	b.n	80034aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d018      	beq.n	800345a <RCCEx_PLLSAI1_Config+0x86>
 8003428:	2b03      	cmp	r3, #3
 800342a:	d825      	bhi.n	8003478 <RCCEx_PLLSAI1_Config+0xa4>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0x62>
 8003430:	2b02      	cmp	r3, #2
 8003432:	d009      	beq.n	8003448 <RCCEx_PLLSAI1_Config+0x74>
 8003434:	e020      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003436:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11d      	bne.n	800347e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e01a      	b.n	800347e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003448:	4b5a      	ldr	r3, [pc, #360]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d116      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003458:	e013      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003466:	4b53      	ldr	r3, [pc, #332]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003476:	e006      	b.n	8003486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e004      	b.n	8003488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003486:	bf00      	nop
    }

    if(status == HAL_OK)
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10d      	bne.n	80034aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800348e:	4b49      	ldr	r3, [pc, #292]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	430b      	orrs	r3, r1
 80034a4:	4943      	ldr	r1, [pc, #268]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d17c      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034b0:	4b40      	ldr	r3, [pc, #256]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a3f      	ldr	r2, [pc, #252]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034bc:	f7fd fbf2 	bl	8000ca4 <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c2:	e009      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c4:	f7fd fbee 	bl	8000ca4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d902      	bls.n	80034d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	73fb      	strb	r3, [r7, #15]
        break;
 80034d6:	e005      	b.n	80034e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d8:	4b36      	ldr	r3, [pc, #216]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ef      	bne.n	80034c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d15f      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f0:	4b30      	ldr	r3, [pc, #192]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80034f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6892      	ldr	r2, [r2, #8]
 8003500:	0211      	lsls	r1, r2, #8
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	06d2      	lsls	r2, r2, #27
 8003508:	430a      	orrs	r2, r1
 800350a:	492a      	ldr	r1, [pc, #168]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]
 8003510:	e027      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d112      	bne.n	800353e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003518:	4b26      	ldr	r3, [pc, #152]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
 8003528:	0211      	lsls	r1, r2, #8
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6912      	ldr	r2, [r2, #16]
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0552      	lsls	r2, r2, #21
 8003534:	430a      	orrs	r2, r1
 8003536:	491f      	ldr	r1, [pc, #124]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	610b      	str	r3, [r1, #16]
 800353c:	e011      	b.n	8003562 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353e:	4b1d      	ldr	r3, [pc, #116]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003546:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	0211      	lsls	r1, r2, #8
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6952      	ldr	r2, [r2, #20]
 8003554:	0852      	lsrs	r2, r2, #1
 8003556:	3a01      	subs	r2, #1
 8003558:	0652      	lsls	r2, r2, #25
 800355a:	430a      	orrs	r2, r1
 800355c:	4915      	ldr	r1, [pc, #84]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003562:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800356c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fd fb99 	bl	8000ca4 <HAL_GetTick>
 8003572:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003574:	e009      	b.n	800358a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003576:	f7fd fb95 	bl	8000ca4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d902      	bls.n	800358a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	73fb      	strb	r3, [r7, #15]
          break;
 8003588:	e005      	b.n	8003596 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ef      	beq.n	8003576 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800359c:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4903      	ldr	r1, [pc, #12]	@ (80035b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000

080035b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e040      	b.n	800364c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd f9ee 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	@ 0x24
 80035e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fade 	bl	8003bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8af 	bl	8003768 <UART_SetConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e01b      	b.n	800364c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb5d 	bl	8003d04 <UART_CheckIdleState>
 800364a:	4603      	mov	r3, r0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	@ 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003668:	2b20      	cmp	r3, #32
 800366a:	d177      	bne.n	800375c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_Transmit+0x24>
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e070      	b.n	800375e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	@ 0x21
 8003688:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368a:	f7fd fb0b 	bl	8000ca4 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	88fa      	ldrh	r2, [r7, #6]
 800369c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a8:	d108      	bne.n	80036bc <HAL_UART_Transmit+0x68>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e003      	b.n	80036c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036c4:	e02f      	b.n	8003726 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fbbf 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e03b      	b.n	800375e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	b292      	uxth	r2, r2
 80036fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e007      	b.n	8003714 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3301      	adds	r3, #1
 8003712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1c9      	bne.n	80036c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	2140      	movs	r1, #64	@ 0x40
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fb89 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e005      	b.n	800375e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b08a      	sub	sp, #40	@ 0x28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4313      	orrs	r3, r2
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4bb4      	ldr	r3, [pc, #720]	@ (8003a68 <UART_SetConfig+0x300>)
 8003798:	4013      	ands	r3, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4aa9      	ldr	r2, [pc, #676]	@ (8003a6c <UART_SetConfig+0x304>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	4313      	orrs	r3, r2
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4aa0      	ldr	r2, [pc, #640]	@ (8003a70 <UART_SetConfig+0x308>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d126      	bne.n	8003840 <UART_SetConfig+0xd8>
 80037f2:	4ba0      	ldr	r3, [pc, #640]	@ (8003a74 <UART_SetConfig+0x30c>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d81b      	bhi.n	8003838 <UART_SetConfig+0xd0>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <UART_SetConfig+0xa0>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	08003829 	.word	0x08003829
 8003810:	08003821 	.word	0x08003821
 8003814:	08003831 	.word	0x08003831
 8003818:	2301      	movs	r3, #1
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381e:	e080      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003820:	2302      	movs	r3, #2
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003826:	e07c      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003828:	2304      	movs	r3, #4
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382e:	e078      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003830:	2308      	movs	r3, #8
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003836:	e074      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003838:	2310      	movs	r3, #16
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383e:	e070      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a8c      	ldr	r2, [pc, #560]	@ (8003a78 <UART_SetConfig+0x310>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d138      	bne.n	80038bc <UART_SetConfig+0x154>
 800384a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a74 <UART_SetConfig+0x30c>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d82d      	bhi.n	80038b4 <UART_SetConfig+0x14c>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <UART_SetConfig+0xf8>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003895 	.word	0x08003895
 8003864:	080038b5 	.word	0x080038b5
 8003868:	080038b5 	.word	0x080038b5
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038b5 	.word	0x080038b5
 8003880:	0800389d 	.word	0x0800389d
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038ad 	.word	0x080038ad
 8003894:	2300      	movs	r3, #0
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389a:	e042      	b.n	8003922 <UART_SetConfig+0x1ba>
 800389c:	2302      	movs	r3, #2
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a2:	e03e      	b.n	8003922 <UART_SetConfig+0x1ba>
 80038a4:	2304      	movs	r3, #4
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038aa:	e03a      	b.n	8003922 <UART_SetConfig+0x1ba>
 80038ac:	2308      	movs	r3, #8
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e036      	b.n	8003922 <UART_SetConfig+0x1ba>
 80038b4:	2310      	movs	r3, #16
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ba:	e032      	b.n	8003922 <UART_SetConfig+0x1ba>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <UART_SetConfig+0x304>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d12a      	bne.n	800391c <UART_SetConfig+0x1b4>
 80038c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003a74 <UART_SetConfig+0x30c>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038d4:	d01a      	beq.n	800390c <UART_SetConfig+0x1a4>
 80038d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038da:	d81b      	bhi.n	8003914 <UART_SetConfig+0x1ac>
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e0:	d00c      	beq.n	80038fc <UART_SetConfig+0x194>
 80038e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e6:	d815      	bhi.n	8003914 <UART_SetConfig+0x1ac>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <UART_SetConfig+0x18c>
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d008      	beq.n	8003904 <UART_SetConfig+0x19c>
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x1ac>
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038fa:	e012      	b.n	8003922 <UART_SetConfig+0x1ba>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e00e      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003904:	2304      	movs	r3, #4
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	e00a      	b.n	8003922 <UART_SetConfig+0x1ba>
 800390c:	2308      	movs	r3, #8
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e006      	b.n	8003922 <UART_SetConfig+0x1ba>
 8003914:	2310      	movs	r3, #16
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391a:	e002      	b.n	8003922 <UART_SetConfig+0x1ba>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <UART_SetConfig+0x304>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d17a      	bne.n	8003a22 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003930:	2b08      	cmp	r3, #8
 8003932:	d824      	bhi.n	800397e <UART_SetConfig+0x216>
 8003934:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0x1d4>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	0800397f 	.word	0x0800397f
 8003944:	08003969 	.word	0x08003969
 8003948:	0800397f 	.word	0x0800397f
 800394c:	0800396f 	.word	0x0800396f
 8003950:	0800397f 	.word	0x0800397f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800397f 	.word	0x0800397f
 800395c:	08003977 	.word	0x08003977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff faa6 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003964:	61f8      	str	r0, [r7, #28]
        break;
 8003966:	e010      	b.n	800398a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b44      	ldr	r3, [pc, #272]	@ (8003a7c <UART_SetConfig+0x314>)
 800396a:	61fb      	str	r3, [r7, #28]
        break;
 800396c:	e00d      	b.n	800398a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7ff fa07 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8003972:	61f8      	str	r0, [r7, #28]
        break;
 8003974:	e009      	b.n	800398a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397a:	61fb      	str	r3, [r7, #28]
        break;
 800397c:	e005      	b.n	800398a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003988:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8107 	beq.w	8003ba0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d305      	bcc.n	80039ae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d903      	bls.n	80039b6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039b4:	e0f4      	b.n	8003ba0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	2200      	movs	r2, #0
 80039ba:	461c      	mov	r4, r3
 80039bc:	4615      	mov	r5, r2
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	022b      	lsls	r3, r5, #8
 80039c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039cc:	0222      	lsls	r2, r4, #8
 80039ce:	68f9      	ldr	r1, [r7, #12]
 80039d0:	6849      	ldr	r1, [r1, #4]
 80039d2:	0849      	lsrs	r1, r1, #1
 80039d4:	2000      	movs	r0, #0
 80039d6:	4688      	mov	r8, r1
 80039d8:	4681      	mov	r9, r0
 80039da:	eb12 0a08 	adds.w	sl, r2, r8
 80039de:	eb43 0b09 	adc.w	fp, r3, r9
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f0:	4650      	mov	r0, sl
 80039f2:	4659      	mov	r1, fp
 80039f4:	f7fc fc44 	bl	8000280 <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4613      	mov	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a06:	d308      	bcc.n	8003a1a <UART_SetConfig+0x2b2>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a0e:	d204      	bcs.n	8003a1a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e0c2      	b.n	8003ba0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a20:	e0be      	b.n	8003ba0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a2a:	d16a      	bne.n	8003b02 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d834      	bhi.n	8003a9e <UART_SetConfig+0x336>
 8003a34:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <UART_SetConfig+0x2d4>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a81 	.word	0x08003a81
 8003a44:	08003a89 	.word	0x08003a89
 8003a48:	08003a9f 	.word	0x08003a9f
 8003a4c:	08003a8f 	.word	0x08003a8f
 8003a50:	08003a9f 	.word	0x08003a9f
 8003a54:	08003a9f 	.word	0x08003a9f
 8003a58:	08003a9f 	.word	0x08003a9f
 8003a5c:	08003a97 	.word	0x08003a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a60:	f7ff fa26 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003a64:	61f8      	str	r0, [r7, #28]
        break;
 8003a66:	e020      	b.n	8003aaa <UART_SetConfig+0x342>
 8003a68:	efff69f3 	.word	0xefff69f3
 8003a6c:	40008000 	.word	0x40008000
 8003a70:	40013800 	.word	0x40013800
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a80:	f7ff fa2c 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8003a84:	61f8      	str	r0, [r7, #28]
        break;
 8003a86:	e010      	b.n	8003aaa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b4c      	ldr	r3, [pc, #304]	@ (8003bbc <UART_SetConfig+0x454>)
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e00d      	b.n	8003aaa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7ff f977 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8003a92:	61f8      	str	r0, [r7, #28]
        break;
 8003a94:	e009      	b.n	8003aaa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e005      	b.n	8003aaa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d077      	beq.n	8003ba0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005a      	lsls	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	441a      	add	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b0f      	cmp	r3, #15
 8003aca:	d916      	bls.n	8003afa <UART_SetConfig+0x392>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad2:	d212      	bcs.n	8003afa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f023 030f 	bic.w	r3, r3, #15
 8003adc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	8afa      	ldrh	r2, [r7, #22]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e052      	b.n	8003ba0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b00:	e04e      	b.n	8003ba0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d827      	bhi.n	8003b5a <UART_SetConfig+0x3f2>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <UART_SetConfig+0x3a8>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b35 	.word	0x08003b35
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b5b 	.word	0x08003b5b
 8003b20:	08003b4b 	.word	0x08003b4b
 8003b24:	08003b5b 	.word	0x08003b5b
 8003b28:	08003b5b 	.word	0x08003b5b
 8003b2c:	08003b5b 	.word	0x08003b5b
 8003b30:	08003b53 	.word	0x08003b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b34:	f7ff f9bc 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003b38:	61f8      	str	r0, [r7, #28]
        break;
 8003b3a:	e014      	b.n	8003b66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff f9ce 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8003b40:	61f8      	str	r0, [r7, #28]
        break;
 8003b42:	e010      	b.n	8003b66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b44:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <UART_SetConfig+0x454>)
 8003b46:	61fb      	str	r3, [r7, #28]
        break;
 8003b48:	e00d      	b.n	8003b66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4a:	f7ff f919 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8003b4e:	61f8      	str	r0, [r7, #28]
        break;
 8003b50:	e009      	b.n	8003b66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b56:	61fb      	str	r3, [r7, #28]
        break;
 8003b58:	e005      	b.n	8003b66 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b64:	bf00      	nop
    }

    if (pclk != 0U)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	085a      	lsrs	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	441a      	add	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d909      	bls.n	8003b9a <UART_SetConfig+0x432>
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d205      	bcs.n	8003b9a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e002      	b.n	8003ba0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3728      	adds	r7, #40	@ 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	00f42400 	.word	0x00f42400

08003bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01a      	beq.n	8003cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cbe:	d10a      	bne.n	8003cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b098      	sub	sp, #96	@ 0x60
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d14:	f7fc ffc6 	bl	8000ca4 <HAL_GetTick>
 8003d18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d12e      	bne.n	8003d86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f88c 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d021      	beq.n	8003d86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e062      	b.n	8003e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d149      	bne.n	8003e28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f856 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03c      	beq.n	8003e28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	623b      	str	r3, [r7, #32]
   return(result);
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e6      	bne.n	8003dae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3308      	adds	r3, #8
 8003de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e00:	61fa      	str	r2, [r7, #28]
 8003e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e011      	b.n	8003e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3758      	adds	r7, #88	@ 0x58
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	e04f      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d04b      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fc ff19 	bl	8000ca4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e04e      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d037      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d034      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d031      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d110      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f838 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e029      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee0:	d111      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f81e 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0a0      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b095      	sub	sp, #84	@ 0x54
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d118      	bne.n	8003fd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6979      	ldr	r1, [r7, #20]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fea:	bf00      	nop
 8003fec:	3754      	adds	r7, #84	@ 0x54
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <siprintf>:
 8003ff8:	b40e      	push	{r1, r2, r3}
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	b09d      	sub	sp, #116	@ 0x74
 8003ffe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004000:	9002      	str	r0, [sp, #8]
 8004002:	9006      	str	r0, [sp, #24]
 8004004:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004008:	480a      	ldr	r0, [pc, #40]	@ (8004034 <siprintf+0x3c>)
 800400a:	9107      	str	r1, [sp, #28]
 800400c:	9104      	str	r1, [sp, #16]
 800400e:	490a      	ldr	r1, [pc, #40]	@ (8004038 <siprintf+0x40>)
 8004010:	f853 2b04 	ldr.w	r2, [r3], #4
 8004014:	9105      	str	r1, [sp, #20]
 8004016:	2400      	movs	r4, #0
 8004018:	a902      	add	r1, sp, #8
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004020:	f000 f994 	bl	800434c <_svfiprintf_r>
 8004024:	9b02      	ldr	r3, [sp, #8]
 8004026:	701c      	strb	r4, [r3, #0]
 8004028:	b01d      	add	sp, #116	@ 0x74
 800402a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800402e:	b003      	add	sp, #12
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c
 8004038:	ffff0208 	.word	0xffff0208

0800403c <memset>:
 800403c:	4402      	add	r2, r0
 800403e:	4603      	mov	r3, r0
 8004040:	4293      	cmp	r3, r2
 8004042:	d100      	bne.n	8004046 <memset+0xa>
 8004044:	4770      	bx	lr
 8004046:	f803 1b01 	strb.w	r1, [r3], #1
 800404a:	e7f9      	b.n	8004040 <memset+0x4>

0800404c <__errno>:
 800404c:	4b01      	ldr	r3, [pc, #4]	@ (8004054 <__errno+0x8>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4d0d      	ldr	r5, [pc, #52]	@ (8004090 <__libc_init_array+0x38>)
 800405c:	4c0d      	ldr	r4, [pc, #52]	@ (8004094 <__libc_init_array+0x3c>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	2600      	movs	r6, #0
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	4d0b      	ldr	r5, [pc, #44]	@ (8004098 <__libc_init_array+0x40>)
 800406a:	4c0c      	ldr	r4, [pc, #48]	@ (800409c <__libc_init_array+0x44>)
 800406c:	f000 fc64 	bl	8004938 <_init>
 8004070:	1b64      	subs	r4, r4, r5
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	2600      	movs	r6, #0
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f855 3b04 	ldr.w	r3, [r5], #4
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	080049dc 	.word	0x080049dc
 8004094:	080049dc 	.word	0x080049dc
 8004098:	080049dc 	.word	0x080049dc
 800409c:	080049e0 	.word	0x080049e0

080040a0 <__retarget_lock_acquire_recursive>:
 80040a0:	4770      	bx	lr

080040a2 <__retarget_lock_release_recursive>:
 80040a2:	4770      	bx	lr

080040a4 <_free_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d041      	beq.n	8004130 <_free_r+0x8c>
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f0c      	subs	r4, r1, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	18e4      	addlt	r4, r4, r3
 80040b8:	f000 f8e0 	bl	800427c <__malloc_lock>
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <_free_r+0x90>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	b933      	cbnz	r3, 80040d0 <_free_r+0x2c>
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6014      	str	r4, [r2, #0]
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040cc:	f000 b8dc 	b.w	8004288 <__malloc_unlock>
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf01      	itttt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	e7ed      	b.n	80040c2 <_free_r+0x1e>
 80040e6:	461a      	mov	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b10b      	cbz	r3, 80040f0 <_free_r+0x4c>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d9fa      	bls.n	80040e6 <_free_r+0x42>
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	1850      	adds	r0, r2, r1
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d10b      	bne.n	8004110 <_free_r+0x6c>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	4401      	add	r1, r0
 80040fc:	1850      	adds	r0, r2, r1
 80040fe:	4283      	cmp	r3, r0
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	d1e0      	bne.n	80040c6 <_free_r+0x22>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	6053      	str	r3, [r2, #4]
 800410a:	4408      	add	r0, r1
 800410c:	6010      	str	r0, [r2, #0]
 800410e:	e7da      	b.n	80040c6 <_free_r+0x22>
 8004110:	d902      	bls.n	8004118 <_free_r+0x74>
 8004112:	230c      	movs	r3, #12
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	e7d6      	b.n	80040c6 <_free_r+0x22>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	1821      	adds	r1, r4, r0
 800411c:	428b      	cmp	r3, r1
 800411e:	bf04      	itt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	bf04      	itt	eq
 8004128:	1809      	addeq	r1, r1, r0
 800412a:	6021      	streq	r1, [r4, #0]
 800412c:	6054      	str	r4, [r2, #4]
 800412e:	e7ca      	b.n	80040c6 <_free_r+0x22>
 8004130:	bd38      	pop	{r3, r4, r5, pc}
 8004132:	bf00      	nop
 8004134:	200002b0 	.word	0x200002b0

08004138 <sbrk_aligned>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4e0f      	ldr	r6, [pc, #60]	@ (8004178 <sbrk_aligned+0x40>)
 800413c:	460c      	mov	r4, r1
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	4605      	mov	r5, r0
 8004142:	b911      	cbnz	r1, 800414a <sbrk_aligned+0x12>
 8004144:	f000 fba4 	bl	8004890 <_sbrk_r>
 8004148:	6030      	str	r0, [r6, #0]
 800414a:	4621      	mov	r1, r4
 800414c:	4628      	mov	r0, r5
 800414e:	f000 fb9f 	bl	8004890 <_sbrk_r>
 8004152:	1c43      	adds	r3, r0, #1
 8004154:	d103      	bne.n	800415e <sbrk_aligned+0x26>
 8004156:	f04f 34ff 	mov.w	r4, #4294967295
 800415a:	4620      	mov	r0, r4
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	1cc4      	adds	r4, r0, #3
 8004160:	f024 0403 	bic.w	r4, r4, #3
 8004164:	42a0      	cmp	r0, r4
 8004166:	d0f8      	beq.n	800415a <sbrk_aligned+0x22>
 8004168:	1a21      	subs	r1, r4, r0
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fb90 	bl	8004890 <_sbrk_r>
 8004170:	3001      	adds	r0, #1
 8004172:	d1f2      	bne.n	800415a <sbrk_aligned+0x22>
 8004174:	e7ef      	b.n	8004156 <sbrk_aligned+0x1e>
 8004176:	bf00      	nop
 8004178:	200002ac 	.word	0x200002ac

0800417c <_malloc_r>:
 800417c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004180:	1ccd      	adds	r5, r1, #3
 8004182:	f025 0503 	bic.w	r5, r5, #3
 8004186:	3508      	adds	r5, #8
 8004188:	2d0c      	cmp	r5, #12
 800418a:	bf38      	it	cc
 800418c:	250c      	movcc	r5, #12
 800418e:	2d00      	cmp	r5, #0
 8004190:	4606      	mov	r6, r0
 8004192:	db01      	blt.n	8004198 <_malloc_r+0x1c>
 8004194:	42a9      	cmp	r1, r5
 8004196:	d904      	bls.n	80041a2 <_malloc_r+0x26>
 8004198:	230c      	movs	r3, #12
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	2000      	movs	r0, #0
 800419e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004278 <_malloc_r+0xfc>
 80041a6:	f000 f869 	bl	800427c <__malloc_lock>
 80041aa:	f8d8 3000 	ldr.w	r3, [r8]
 80041ae:	461c      	mov	r4, r3
 80041b0:	bb44      	cbnz	r4, 8004204 <_malloc_r+0x88>
 80041b2:	4629      	mov	r1, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	f7ff ffbf 	bl	8004138 <sbrk_aligned>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	4604      	mov	r4, r0
 80041be:	d158      	bne.n	8004272 <_malloc_r+0xf6>
 80041c0:	f8d8 4000 	ldr.w	r4, [r8]
 80041c4:	4627      	mov	r7, r4
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	d143      	bne.n	8004252 <_malloc_r+0xd6>
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	d04b      	beq.n	8004266 <_malloc_r+0xea>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	4639      	mov	r1, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	eb04 0903 	add.w	r9, r4, r3
 80041d8:	f000 fb5a 	bl	8004890 <_sbrk_r>
 80041dc:	4581      	cmp	r9, r0
 80041de:	d142      	bne.n	8004266 <_malloc_r+0xea>
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	1a6d      	subs	r5, r5, r1
 80041e4:	4629      	mov	r1, r5
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff ffa6 	bl	8004138 <sbrk_aligned>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d03a      	beq.n	8004266 <_malloc_r+0xea>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	442b      	add	r3, r5
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	f8d8 3000 	ldr.w	r3, [r8]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	bb62      	cbnz	r2, 8004258 <_malloc_r+0xdc>
 80041fe:	f8c8 7000 	str.w	r7, [r8]
 8004202:	e00f      	b.n	8004224 <_malloc_r+0xa8>
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	1b52      	subs	r2, r2, r5
 8004208:	d420      	bmi.n	800424c <_malloc_r+0xd0>
 800420a:	2a0b      	cmp	r2, #11
 800420c:	d917      	bls.n	800423e <_malloc_r+0xc2>
 800420e:	1961      	adds	r1, r4, r5
 8004210:	42a3      	cmp	r3, r4
 8004212:	6025      	str	r5, [r4, #0]
 8004214:	bf18      	it	ne
 8004216:	6059      	strne	r1, [r3, #4]
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	bf08      	it	eq
 800421c:	f8c8 1000 	streq.w	r1, [r8]
 8004220:	5162      	str	r2, [r4, r5]
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	4630      	mov	r0, r6
 8004226:	f000 f82f 	bl	8004288 <__malloc_unlock>
 800422a:	f104 000b 	add.w	r0, r4, #11
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	f020 0007 	bic.w	r0, r0, #7
 8004234:	1ac2      	subs	r2, r0, r3
 8004236:	bf1c      	itt	ne
 8004238:	1a1b      	subne	r3, r3, r0
 800423a:	50a3      	strne	r3, [r4, r2]
 800423c:	e7af      	b.n	800419e <_malloc_r+0x22>
 800423e:	6862      	ldr	r2, [r4, #4]
 8004240:	42a3      	cmp	r3, r4
 8004242:	bf0c      	ite	eq
 8004244:	f8c8 2000 	streq.w	r2, [r8]
 8004248:	605a      	strne	r2, [r3, #4]
 800424a:	e7eb      	b.n	8004224 <_malloc_r+0xa8>
 800424c:	4623      	mov	r3, r4
 800424e:	6864      	ldr	r4, [r4, #4]
 8004250:	e7ae      	b.n	80041b0 <_malloc_r+0x34>
 8004252:	463c      	mov	r4, r7
 8004254:	687f      	ldr	r7, [r7, #4]
 8004256:	e7b6      	b.n	80041c6 <_malloc_r+0x4a>
 8004258:	461a      	mov	r2, r3
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	42a3      	cmp	r3, r4
 800425e:	d1fb      	bne.n	8004258 <_malloc_r+0xdc>
 8004260:	2300      	movs	r3, #0
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e7de      	b.n	8004224 <_malloc_r+0xa8>
 8004266:	230c      	movs	r3, #12
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f80c 	bl	8004288 <__malloc_unlock>
 8004270:	e794      	b.n	800419c <_malloc_r+0x20>
 8004272:	6005      	str	r5, [r0, #0]
 8004274:	e7d6      	b.n	8004224 <_malloc_r+0xa8>
 8004276:	bf00      	nop
 8004278:	200002b0 	.word	0x200002b0

0800427c <__malloc_lock>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__malloc_lock+0x8>)
 800427e:	f7ff bf0f 	b.w	80040a0 <__retarget_lock_acquire_recursive>
 8004282:	bf00      	nop
 8004284:	200002a8 	.word	0x200002a8

08004288 <__malloc_unlock>:
 8004288:	4801      	ldr	r0, [pc, #4]	@ (8004290 <__malloc_unlock+0x8>)
 800428a:	f7ff bf0a 	b.w	80040a2 <__retarget_lock_release_recursive>
 800428e:	bf00      	nop
 8004290:	200002a8 	.word	0x200002a8

08004294 <__ssputs_r>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	688e      	ldr	r6, [r1, #8]
 800429a:	461f      	mov	r7, r3
 800429c:	42be      	cmp	r6, r7
 800429e:	680b      	ldr	r3, [r1, #0]
 80042a0:	4682      	mov	sl, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	4690      	mov	r8, r2
 80042a6:	d82d      	bhi.n	8004304 <__ssputs_r+0x70>
 80042a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042b0:	d026      	beq.n	8004300 <__ssputs_r+0x6c>
 80042b2:	6965      	ldr	r5, [r4, #20]
 80042b4:	6909      	ldr	r1, [r1, #16]
 80042b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ba:	eba3 0901 	sub.w	r9, r3, r1
 80042be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042c2:	1c7b      	adds	r3, r7, #1
 80042c4:	444b      	add	r3, r9
 80042c6:	106d      	asrs	r5, r5, #1
 80042c8:	429d      	cmp	r5, r3
 80042ca:	bf38      	it	cc
 80042cc:	461d      	movcc	r5, r3
 80042ce:	0553      	lsls	r3, r2, #21
 80042d0:	d527      	bpl.n	8004322 <__ssputs_r+0x8e>
 80042d2:	4629      	mov	r1, r5
 80042d4:	f7ff ff52 	bl	800417c <_malloc_r>
 80042d8:	4606      	mov	r6, r0
 80042da:	b360      	cbz	r0, 8004336 <__ssputs_r+0xa2>
 80042dc:	6921      	ldr	r1, [r4, #16]
 80042de:	464a      	mov	r2, r9
 80042e0:	f000 fae6 	bl	80048b0 <memcpy>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	6126      	str	r6, [r4, #16]
 80042f2:	6165      	str	r5, [r4, #20]
 80042f4:	444e      	add	r6, r9
 80042f6:	eba5 0509 	sub.w	r5, r5, r9
 80042fa:	6026      	str	r6, [r4, #0]
 80042fc:	60a5      	str	r5, [r4, #8]
 80042fe:	463e      	mov	r6, r7
 8004300:	42be      	cmp	r6, r7
 8004302:	d900      	bls.n	8004306 <__ssputs_r+0x72>
 8004304:	463e      	mov	r6, r7
 8004306:	6820      	ldr	r0, [r4, #0]
 8004308:	4632      	mov	r2, r6
 800430a:	4641      	mov	r1, r8
 800430c:	f000 faa6 	bl	800485c <memmove>
 8004310:	68a3      	ldr	r3, [r4, #8]
 8004312:	1b9b      	subs	r3, r3, r6
 8004314:	60a3      	str	r3, [r4, #8]
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	4433      	add	r3, r6
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	2000      	movs	r0, #0
 800431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004322:	462a      	mov	r2, r5
 8004324:	f000 fad2 	bl	80048cc <_realloc_r>
 8004328:	4606      	mov	r6, r0
 800432a:	2800      	cmp	r0, #0
 800432c:	d1e0      	bne.n	80042f0 <__ssputs_r+0x5c>
 800432e:	6921      	ldr	r1, [r4, #16]
 8004330:	4650      	mov	r0, sl
 8004332:	f7ff feb7 	bl	80040a4 <_free_r>
 8004336:	230c      	movs	r3, #12
 8004338:	f8ca 3000 	str.w	r3, [sl]
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	e7e9      	b.n	800431e <__ssputs_r+0x8a>
	...

0800434c <_svfiprintf_r>:
 800434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004350:	4698      	mov	r8, r3
 8004352:	898b      	ldrh	r3, [r1, #12]
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	b09d      	sub	sp, #116	@ 0x74
 8004358:	4607      	mov	r7, r0
 800435a:	460d      	mov	r5, r1
 800435c:	4614      	mov	r4, r2
 800435e:	d510      	bpl.n	8004382 <_svfiprintf_r+0x36>
 8004360:	690b      	ldr	r3, [r1, #16]
 8004362:	b973      	cbnz	r3, 8004382 <_svfiprintf_r+0x36>
 8004364:	2140      	movs	r1, #64	@ 0x40
 8004366:	f7ff ff09 	bl	800417c <_malloc_r>
 800436a:	6028      	str	r0, [r5, #0]
 800436c:	6128      	str	r0, [r5, #16]
 800436e:	b930      	cbnz	r0, 800437e <_svfiprintf_r+0x32>
 8004370:	230c      	movs	r3, #12
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	b01d      	add	sp, #116	@ 0x74
 800437a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437e:	2340      	movs	r3, #64	@ 0x40
 8004380:	616b      	str	r3, [r5, #20]
 8004382:	2300      	movs	r3, #0
 8004384:	9309      	str	r3, [sp, #36]	@ 0x24
 8004386:	2320      	movs	r3, #32
 8004388:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800438c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004390:	2330      	movs	r3, #48	@ 0x30
 8004392:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004530 <_svfiprintf_r+0x1e4>
 8004396:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800439a:	f04f 0901 	mov.w	r9, #1
 800439e:	4623      	mov	r3, r4
 80043a0:	469a      	mov	sl, r3
 80043a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a6:	b10a      	cbz	r2, 80043ac <_svfiprintf_r+0x60>
 80043a8:	2a25      	cmp	r2, #37	@ 0x25
 80043aa:	d1f9      	bne.n	80043a0 <_svfiprintf_r+0x54>
 80043ac:	ebba 0b04 	subs.w	fp, sl, r4
 80043b0:	d00b      	beq.n	80043ca <_svfiprintf_r+0x7e>
 80043b2:	465b      	mov	r3, fp
 80043b4:	4622      	mov	r2, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	4638      	mov	r0, r7
 80043ba:	f7ff ff6b 	bl	8004294 <__ssputs_r>
 80043be:	3001      	adds	r0, #1
 80043c0:	f000 80a7 	beq.w	8004512 <_svfiprintf_r+0x1c6>
 80043c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043c6:	445a      	add	r2, fp
 80043c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80043ca:	f89a 3000 	ldrb.w	r3, [sl]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 809f 	beq.w	8004512 <_svfiprintf_r+0x1c6>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
 80043da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043de:	f10a 0a01 	add.w	sl, sl, #1
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ec:	4654      	mov	r4, sl
 80043ee:	2205      	movs	r2, #5
 80043f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f4:	484e      	ldr	r0, [pc, #312]	@ (8004530 <_svfiprintf_r+0x1e4>)
 80043f6:	f7fb fef3 	bl	80001e0 <memchr>
 80043fa:	9a04      	ldr	r2, [sp, #16]
 80043fc:	b9d8      	cbnz	r0, 8004436 <_svfiprintf_r+0xea>
 80043fe:	06d0      	lsls	r0, r2, #27
 8004400:	bf44      	itt	mi
 8004402:	2320      	movmi	r3, #32
 8004404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004408:	0711      	lsls	r1, r2, #28
 800440a:	bf44      	itt	mi
 800440c:	232b      	movmi	r3, #43	@ 0x2b
 800440e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004412:	f89a 3000 	ldrb.w	r3, [sl]
 8004416:	2b2a      	cmp	r3, #42	@ 0x2a
 8004418:	d015      	beq.n	8004446 <_svfiprintf_r+0xfa>
 800441a:	9a07      	ldr	r2, [sp, #28]
 800441c:	4654      	mov	r4, sl
 800441e:	2000      	movs	r0, #0
 8004420:	f04f 0c0a 	mov.w	ip, #10
 8004424:	4621      	mov	r1, r4
 8004426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442a:	3b30      	subs	r3, #48	@ 0x30
 800442c:	2b09      	cmp	r3, #9
 800442e:	d94b      	bls.n	80044c8 <_svfiprintf_r+0x17c>
 8004430:	b1b0      	cbz	r0, 8004460 <_svfiprintf_r+0x114>
 8004432:	9207      	str	r2, [sp, #28]
 8004434:	e014      	b.n	8004460 <_svfiprintf_r+0x114>
 8004436:	eba0 0308 	sub.w	r3, r0, r8
 800443a:	fa09 f303 	lsl.w	r3, r9, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	46a2      	mov	sl, r4
 8004444:	e7d2      	b.n	80043ec <_svfiprintf_r+0xa0>
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	1d19      	adds	r1, r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	9103      	str	r1, [sp, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfbb      	ittet	lt
 8004452:	425b      	neglt	r3, r3
 8004454:	f042 0202 	orrlt.w	r2, r2, #2
 8004458:	9307      	strge	r3, [sp, #28]
 800445a:	9307      	strlt	r3, [sp, #28]
 800445c:	bfb8      	it	lt
 800445e:	9204      	strlt	r2, [sp, #16]
 8004460:	7823      	ldrb	r3, [r4, #0]
 8004462:	2b2e      	cmp	r3, #46	@ 0x2e
 8004464:	d10a      	bne.n	800447c <_svfiprintf_r+0x130>
 8004466:	7863      	ldrb	r3, [r4, #1]
 8004468:	2b2a      	cmp	r3, #42	@ 0x2a
 800446a:	d132      	bne.n	80044d2 <_svfiprintf_r+0x186>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	9203      	str	r2, [sp, #12]
 8004474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004478:	3402      	adds	r4, #2
 800447a:	9305      	str	r3, [sp, #20]
 800447c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004540 <_svfiprintf_r+0x1f4>
 8004480:	7821      	ldrb	r1, [r4, #0]
 8004482:	2203      	movs	r2, #3
 8004484:	4650      	mov	r0, sl
 8004486:	f7fb feab 	bl	80001e0 <memchr>
 800448a:	b138      	cbz	r0, 800449c <_svfiprintf_r+0x150>
 800448c:	9b04      	ldr	r3, [sp, #16]
 800448e:	eba0 000a 	sub.w	r0, r0, sl
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	4082      	lsls	r2, r0
 8004496:	4313      	orrs	r3, r2
 8004498:	3401      	adds	r4, #1
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a0:	4824      	ldr	r0, [pc, #144]	@ (8004534 <_svfiprintf_r+0x1e8>)
 80044a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044a6:	2206      	movs	r2, #6
 80044a8:	f7fb fe9a 	bl	80001e0 <memchr>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d036      	beq.n	800451e <_svfiprintf_r+0x1d2>
 80044b0:	4b21      	ldr	r3, [pc, #132]	@ (8004538 <_svfiprintf_r+0x1ec>)
 80044b2:	bb1b      	cbnz	r3, 80044fc <_svfiprintf_r+0x1b0>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	3307      	adds	r3, #7
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	3308      	adds	r3, #8
 80044be:	9303      	str	r3, [sp, #12]
 80044c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c2:	4433      	add	r3, r6
 80044c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044c6:	e76a      	b.n	800439e <_svfiprintf_r+0x52>
 80044c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044cc:	460c      	mov	r4, r1
 80044ce:	2001      	movs	r0, #1
 80044d0:	e7a8      	b.n	8004424 <_svfiprintf_r+0xd8>
 80044d2:	2300      	movs	r3, #0
 80044d4:	3401      	adds	r4, #1
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	4619      	mov	r1, r3
 80044da:	f04f 0c0a 	mov.w	ip, #10
 80044de:	4620      	mov	r0, r4
 80044e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e4:	3a30      	subs	r2, #48	@ 0x30
 80044e6:	2a09      	cmp	r2, #9
 80044e8:	d903      	bls.n	80044f2 <_svfiprintf_r+0x1a6>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0c6      	beq.n	800447c <_svfiprintf_r+0x130>
 80044ee:	9105      	str	r1, [sp, #20]
 80044f0:	e7c4      	b.n	800447c <_svfiprintf_r+0x130>
 80044f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044f6:	4604      	mov	r4, r0
 80044f8:	2301      	movs	r3, #1
 80044fa:	e7f0      	b.n	80044de <_svfiprintf_r+0x192>
 80044fc:	ab03      	add	r3, sp, #12
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	462a      	mov	r2, r5
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <_svfiprintf_r+0x1f0>)
 8004504:	a904      	add	r1, sp, #16
 8004506:	4638      	mov	r0, r7
 8004508:	f3af 8000 	nop.w
 800450c:	1c42      	adds	r2, r0, #1
 800450e:	4606      	mov	r6, r0
 8004510:	d1d6      	bne.n	80044c0 <_svfiprintf_r+0x174>
 8004512:	89ab      	ldrh	r3, [r5, #12]
 8004514:	065b      	lsls	r3, r3, #25
 8004516:	f53f af2d 	bmi.w	8004374 <_svfiprintf_r+0x28>
 800451a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800451c:	e72c      	b.n	8004378 <_svfiprintf_r+0x2c>
 800451e:	ab03      	add	r3, sp, #12
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462a      	mov	r2, r5
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <_svfiprintf_r+0x1f0>)
 8004526:	a904      	add	r1, sp, #16
 8004528:	4638      	mov	r0, r7
 800452a:	f000 f879 	bl	8004620 <_printf_i>
 800452e:	e7ed      	b.n	800450c <_svfiprintf_r+0x1c0>
 8004530:	080049a0 	.word	0x080049a0
 8004534:	080049aa 	.word	0x080049aa
 8004538:	00000000 	.word	0x00000000
 800453c:	08004295 	.word	0x08004295
 8004540:	080049a6 	.word	0x080049a6

08004544 <_printf_common>:
 8004544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004548:	4616      	mov	r6, r2
 800454a:	4698      	mov	r8, r3
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	690b      	ldr	r3, [r1, #16]
 8004550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004554:	4293      	cmp	r3, r2
 8004556:	bfb8      	it	lt
 8004558:	4613      	movlt	r3, r2
 800455a:	6033      	str	r3, [r6, #0]
 800455c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004560:	4607      	mov	r7, r0
 8004562:	460c      	mov	r4, r1
 8004564:	b10a      	cbz	r2, 800456a <_printf_common+0x26>
 8004566:	3301      	adds	r3, #1
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	0699      	lsls	r1, r3, #26
 800456e:	bf42      	ittt	mi
 8004570:	6833      	ldrmi	r3, [r6, #0]
 8004572:	3302      	addmi	r3, #2
 8004574:	6033      	strmi	r3, [r6, #0]
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	f015 0506 	ands.w	r5, r5, #6
 800457c:	d106      	bne.n	800458c <_printf_common+0x48>
 800457e:	f104 0a19 	add.w	sl, r4, #25
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	6832      	ldr	r2, [r6, #0]
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	42ab      	cmp	r3, r5
 800458a:	dc26      	bgt.n	80045da <_printf_common+0x96>
 800458c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	3b00      	subs	r3, #0
 8004594:	bf18      	it	ne
 8004596:	2301      	movne	r3, #1
 8004598:	0692      	lsls	r2, r2, #26
 800459a:	d42b      	bmi.n	80045f4 <_printf_common+0xb0>
 800459c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045a0:	4641      	mov	r1, r8
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c8      	blx	r9
 80045a6:	3001      	adds	r0, #1
 80045a8:	d01e      	beq.n	80045e8 <_printf_common+0xa4>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	f003 0306 	and.w	r3, r3, #6
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf02      	ittt	eq
 80045b6:	68e5      	ldreq	r5, [r4, #12]
 80045b8:	6833      	ldreq	r3, [r6, #0]
 80045ba:	1aed      	subeq	r5, r5, r3
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	bf0c      	ite	eq
 80045c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c4:	2500      	movne	r5, #0
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bfc4      	itt	gt
 80045ca:	1a9b      	subgt	r3, r3, r2
 80045cc:	18ed      	addgt	r5, r5, r3
 80045ce:	2600      	movs	r6, #0
 80045d0:	341a      	adds	r4, #26
 80045d2:	42b5      	cmp	r5, r6
 80045d4:	d11a      	bne.n	800460c <_printf_common+0xc8>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e008      	b.n	80045ec <_printf_common+0xa8>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4641      	mov	r1, r8
 80045e0:	4638      	mov	r0, r7
 80045e2:	47c8      	blx	r9
 80045e4:	3001      	adds	r0, #1
 80045e6:	d103      	bne.n	80045f0 <_printf_common+0xac>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	3501      	adds	r5, #1
 80045f2:	e7c6      	b.n	8004582 <_printf_common+0x3e>
 80045f4:	18e1      	adds	r1, r4, r3
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	2030      	movs	r0, #48	@ 0x30
 80045fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045fe:	4422      	add	r2, r4
 8004600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004608:	3302      	adds	r3, #2
 800460a:	e7c7      	b.n	800459c <_printf_common+0x58>
 800460c:	2301      	movs	r3, #1
 800460e:	4622      	mov	r2, r4
 8004610:	4641      	mov	r1, r8
 8004612:	4638      	mov	r0, r7
 8004614:	47c8      	blx	r9
 8004616:	3001      	adds	r0, #1
 8004618:	d0e6      	beq.n	80045e8 <_printf_common+0xa4>
 800461a:	3601      	adds	r6, #1
 800461c:	e7d9      	b.n	80045d2 <_printf_common+0x8e>
	...

08004620 <_printf_i>:
 8004620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	7e0f      	ldrb	r7, [r1, #24]
 8004626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004628:	2f78      	cmp	r7, #120	@ 0x78
 800462a:	4691      	mov	r9, r2
 800462c:	4680      	mov	r8, r0
 800462e:	460c      	mov	r4, r1
 8004630:	469a      	mov	sl, r3
 8004632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004636:	d807      	bhi.n	8004648 <_printf_i+0x28>
 8004638:	2f62      	cmp	r7, #98	@ 0x62
 800463a:	d80a      	bhi.n	8004652 <_printf_i+0x32>
 800463c:	2f00      	cmp	r7, #0
 800463e:	f000 80d1 	beq.w	80047e4 <_printf_i+0x1c4>
 8004642:	2f58      	cmp	r7, #88	@ 0x58
 8004644:	f000 80b8 	beq.w	80047b8 <_printf_i+0x198>
 8004648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800464c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004650:	e03a      	b.n	80046c8 <_printf_i+0xa8>
 8004652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004656:	2b15      	cmp	r3, #21
 8004658:	d8f6      	bhi.n	8004648 <_printf_i+0x28>
 800465a:	a101      	add	r1, pc, #4	@ (adr r1, 8004660 <_printf_i+0x40>)
 800465c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046cd 	.word	0x080046cd
 8004668:	08004649 	.word	0x08004649
 800466c:	08004649 	.word	0x08004649
 8004670:	08004649 	.word	0x08004649
 8004674:	08004649 	.word	0x08004649
 8004678:	080046cd 	.word	0x080046cd
 800467c:	08004649 	.word	0x08004649
 8004680:	08004649 	.word	0x08004649
 8004684:	08004649 	.word	0x08004649
 8004688:	08004649 	.word	0x08004649
 800468c:	080047cb 	.word	0x080047cb
 8004690:	080046f7 	.word	0x080046f7
 8004694:	08004785 	.word	0x08004785
 8004698:	08004649 	.word	0x08004649
 800469c:	08004649 	.word	0x08004649
 80046a0:	080047ed 	.word	0x080047ed
 80046a4:	08004649 	.word	0x08004649
 80046a8:	080046f7 	.word	0x080046f7
 80046ac:	08004649 	.word	0x08004649
 80046b0:	08004649 	.word	0x08004649
 80046b4:	0800478d 	.word	0x0800478d
 80046b8:	6833      	ldr	r3, [r6, #0]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6032      	str	r2, [r6, #0]
 80046c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046c8:	2301      	movs	r3, #1
 80046ca:	e09c      	b.n	8004806 <_printf_i+0x1e6>
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	6031      	str	r1, [r6, #0]
 80046d4:	0606      	lsls	r6, r0, #24
 80046d6:	d501      	bpl.n	80046dc <_printf_i+0xbc>
 80046d8:	681d      	ldr	r5, [r3, #0]
 80046da:	e003      	b.n	80046e4 <_printf_i+0xc4>
 80046dc:	0645      	lsls	r5, r0, #25
 80046de:	d5fb      	bpl.n	80046d8 <_printf_i+0xb8>
 80046e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	da03      	bge.n	80046f0 <_printf_i+0xd0>
 80046e8:	232d      	movs	r3, #45	@ 0x2d
 80046ea:	426d      	negs	r5, r5
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f0:	4858      	ldr	r0, [pc, #352]	@ (8004854 <_printf_i+0x234>)
 80046f2:	230a      	movs	r3, #10
 80046f4:	e011      	b.n	800471a <_printf_i+0xfa>
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	0608      	lsls	r0, r1, #24
 80046fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004700:	d402      	bmi.n	8004708 <_printf_i+0xe8>
 8004702:	0649      	lsls	r1, r1, #25
 8004704:	bf48      	it	mi
 8004706:	b2ad      	uxthmi	r5, r5
 8004708:	2f6f      	cmp	r7, #111	@ 0x6f
 800470a:	4852      	ldr	r0, [pc, #328]	@ (8004854 <_printf_i+0x234>)
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	bf14      	ite	ne
 8004710:	230a      	movne	r3, #10
 8004712:	2308      	moveq	r3, #8
 8004714:	2100      	movs	r1, #0
 8004716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800471a:	6866      	ldr	r6, [r4, #4]
 800471c:	60a6      	str	r6, [r4, #8]
 800471e:	2e00      	cmp	r6, #0
 8004720:	db05      	blt.n	800472e <_printf_i+0x10e>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	432e      	orrs	r6, r5
 8004726:	f021 0104 	bic.w	r1, r1, #4
 800472a:	6021      	str	r1, [r4, #0]
 800472c:	d04b      	beq.n	80047c6 <_printf_i+0x1a6>
 800472e:	4616      	mov	r6, r2
 8004730:	fbb5 f1f3 	udiv	r1, r5, r3
 8004734:	fb03 5711 	mls	r7, r3, r1, r5
 8004738:	5dc7      	ldrb	r7, [r0, r7]
 800473a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800473e:	462f      	mov	r7, r5
 8004740:	42bb      	cmp	r3, r7
 8004742:	460d      	mov	r5, r1
 8004744:	d9f4      	bls.n	8004730 <_printf_i+0x110>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d10b      	bne.n	8004762 <_printf_i+0x142>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	07df      	lsls	r7, r3, #31
 800474e:	d508      	bpl.n	8004762 <_printf_i+0x142>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	6861      	ldr	r1, [r4, #4]
 8004754:	4299      	cmp	r1, r3
 8004756:	bfde      	ittt	le
 8004758:	2330      	movle	r3, #48	@ 0x30
 800475a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800475e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004762:	1b92      	subs	r2, r2, r6
 8004764:	6122      	str	r2, [r4, #16]
 8004766:	f8cd a000 	str.w	sl, [sp]
 800476a:	464b      	mov	r3, r9
 800476c:	aa03      	add	r2, sp, #12
 800476e:	4621      	mov	r1, r4
 8004770:	4640      	mov	r0, r8
 8004772:	f7ff fee7 	bl	8004544 <_printf_common>
 8004776:	3001      	adds	r0, #1
 8004778:	d14a      	bne.n	8004810 <_printf_i+0x1f0>
 800477a:	f04f 30ff 	mov.w	r0, #4294967295
 800477e:	b004      	add	sp, #16
 8004780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f043 0320 	orr.w	r3, r3, #32
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	4832      	ldr	r0, [pc, #200]	@ (8004858 <_printf_i+0x238>)
 800478e:	2778      	movs	r7, #120	@ 0x78
 8004790:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	6831      	ldr	r1, [r6, #0]
 8004798:	061f      	lsls	r7, r3, #24
 800479a:	f851 5b04 	ldr.w	r5, [r1], #4
 800479e:	d402      	bmi.n	80047a6 <_printf_i+0x186>
 80047a0:	065f      	lsls	r7, r3, #25
 80047a2:	bf48      	it	mi
 80047a4:	b2ad      	uxthmi	r5, r5
 80047a6:	6031      	str	r1, [r6, #0]
 80047a8:	07d9      	lsls	r1, r3, #31
 80047aa:	bf44      	itt	mi
 80047ac:	f043 0320 	orrmi.w	r3, r3, #32
 80047b0:	6023      	strmi	r3, [r4, #0]
 80047b2:	b11d      	cbz	r5, 80047bc <_printf_i+0x19c>
 80047b4:	2310      	movs	r3, #16
 80047b6:	e7ad      	b.n	8004714 <_printf_i+0xf4>
 80047b8:	4826      	ldr	r0, [pc, #152]	@ (8004854 <_printf_i+0x234>)
 80047ba:	e7e9      	b.n	8004790 <_printf_i+0x170>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	f023 0320 	bic.w	r3, r3, #32
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	e7f6      	b.n	80047b4 <_printf_i+0x194>
 80047c6:	4616      	mov	r6, r2
 80047c8:	e7bd      	b.n	8004746 <_printf_i+0x126>
 80047ca:	6833      	ldr	r3, [r6, #0]
 80047cc:	6825      	ldr	r5, [r4, #0]
 80047ce:	6961      	ldr	r1, [r4, #20]
 80047d0:	1d18      	adds	r0, r3, #4
 80047d2:	6030      	str	r0, [r6, #0]
 80047d4:	062e      	lsls	r6, r5, #24
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	d501      	bpl.n	80047de <_printf_i+0x1be>
 80047da:	6019      	str	r1, [r3, #0]
 80047dc:	e002      	b.n	80047e4 <_printf_i+0x1c4>
 80047de:	0668      	lsls	r0, r5, #25
 80047e0:	d5fb      	bpl.n	80047da <_printf_i+0x1ba>
 80047e2:	8019      	strh	r1, [r3, #0]
 80047e4:	2300      	movs	r3, #0
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	4616      	mov	r6, r2
 80047ea:	e7bc      	b.n	8004766 <_printf_i+0x146>
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	6032      	str	r2, [r6, #0]
 80047f2:	681e      	ldr	r6, [r3, #0]
 80047f4:	6862      	ldr	r2, [r4, #4]
 80047f6:	2100      	movs	r1, #0
 80047f8:	4630      	mov	r0, r6
 80047fa:	f7fb fcf1 	bl	80001e0 <memchr>
 80047fe:	b108      	cbz	r0, 8004804 <_printf_i+0x1e4>
 8004800:	1b80      	subs	r0, r0, r6
 8004802:	6060      	str	r0, [r4, #4]
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	2300      	movs	r3, #0
 800480a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800480e:	e7aa      	b.n	8004766 <_printf_i+0x146>
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	4632      	mov	r2, r6
 8004814:	4649      	mov	r1, r9
 8004816:	4640      	mov	r0, r8
 8004818:	47d0      	blx	sl
 800481a:	3001      	adds	r0, #1
 800481c:	d0ad      	beq.n	800477a <_printf_i+0x15a>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	079b      	lsls	r3, r3, #30
 8004822:	d413      	bmi.n	800484c <_printf_i+0x22c>
 8004824:	68e0      	ldr	r0, [r4, #12]
 8004826:	9b03      	ldr	r3, [sp, #12]
 8004828:	4298      	cmp	r0, r3
 800482a:	bfb8      	it	lt
 800482c:	4618      	movlt	r0, r3
 800482e:	e7a6      	b.n	800477e <_printf_i+0x15e>
 8004830:	2301      	movs	r3, #1
 8004832:	4632      	mov	r2, r6
 8004834:	4649      	mov	r1, r9
 8004836:	4640      	mov	r0, r8
 8004838:	47d0      	blx	sl
 800483a:	3001      	adds	r0, #1
 800483c:	d09d      	beq.n	800477a <_printf_i+0x15a>
 800483e:	3501      	adds	r5, #1
 8004840:	68e3      	ldr	r3, [r4, #12]
 8004842:	9903      	ldr	r1, [sp, #12]
 8004844:	1a5b      	subs	r3, r3, r1
 8004846:	42ab      	cmp	r3, r5
 8004848:	dcf2      	bgt.n	8004830 <_printf_i+0x210>
 800484a:	e7eb      	b.n	8004824 <_printf_i+0x204>
 800484c:	2500      	movs	r5, #0
 800484e:	f104 0619 	add.w	r6, r4, #25
 8004852:	e7f5      	b.n	8004840 <_printf_i+0x220>
 8004854:	080049b1 	.word	0x080049b1
 8004858:	080049c2 	.word	0x080049c2

0800485c <memmove>:
 800485c:	4288      	cmp	r0, r1
 800485e:	b510      	push	{r4, lr}
 8004860:	eb01 0402 	add.w	r4, r1, r2
 8004864:	d902      	bls.n	800486c <memmove+0x10>
 8004866:	4284      	cmp	r4, r0
 8004868:	4623      	mov	r3, r4
 800486a:	d807      	bhi.n	800487c <memmove+0x20>
 800486c:	1e43      	subs	r3, r0, #1
 800486e:	42a1      	cmp	r1, r4
 8004870:	d008      	beq.n	8004884 <memmove+0x28>
 8004872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800487a:	e7f8      	b.n	800486e <memmove+0x12>
 800487c:	4402      	add	r2, r0
 800487e:	4601      	mov	r1, r0
 8004880:	428a      	cmp	r2, r1
 8004882:	d100      	bne.n	8004886 <memmove+0x2a>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800488a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800488e:	e7f7      	b.n	8004880 <memmove+0x24>

08004890 <_sbrk_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d06      	ldr	r5, [pc, #24]	@ (80048ac <_sbrk_r+0x1c>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc f928 	bl	8000af0 <_sbrk>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_sbrk_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_sbrk_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200002a4 	.word	0x200002a4

080048b0 <memcpy>:
 80048b0:	440a      	add	r2, r1
 80048b2:	4291      	cmp	r1, r2
 80048b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b8:	d100      	bne.n	80048bc <memcpy+0xc>
 80048ba:	4770      	bx	lr
 80048bc:	b510      	push	{r4, lr}
 80048be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c6:	4291      	cmp	r1, r2
 80048c8:	d1f9      	bne.n	80048be <memcpy+0xe>
 80048ca:	bd10      	pop	{r4, pc}

080048cc <_realloc_r>:
 80048cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d0:	4607      	mov	r7, r0
 80048d2:	4614      	mov	r4, r2
 80048d4:	460d      	mov	r5, r1
 80048d6:	b921      	cbnz	r1, 80048e2 <_realloc_r+0x16>
 80048d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	4611      	mov	r1, r2
 80048de:	f7ff bc4d 	b.w	800417c <_malloc_r>
 80048e2:	b92a      	cbnz	r2, 80048f0 <_realloc_r+0x24>
 80048e4:	f7ff fbde 	bl	80040a4 <_free_r>
 80048e8:	4625      	mov	r5, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f0:	f000 f81a 	bl	8004928 <_malloc_usable_size_r>
 80048f4:	4284      	cmp	r4, r0
 80048f6:	4606      	mov	r6, r0
 80048f8:	d802      	bhi.n	8004900 <_realloc_r+0x34>
 80048fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048fe:	d8f4      	bhi.n	80048ea <_realloc_r+0x1e>
 8004900:	4621      	mov	r1, r4
 8004902:	4638      	mov	r0, r7
 8004904:	f7ff fc3a 	bl	800417c <_malloc_r>
 8004908:	4680      	mov	r8, r0
 800490a:	b908      	cbnz	r0, 8004910 <_realloc_r+0x44>
 800490c:	4645      	mov	r5, r8
 800490e:	e7ec      	b.n	80048ea <_realloc_r+0x1e>
 8004910:	42b4      	cmp	r4, r6
 8004912:	4622      	mov	r2, r4
 8004914:	4629      	mov	r1, r5
 8004916:	bf28      	it	cs
 8004918:	4632      	movcs	r2, r6
 800491a:	f7ff ffc9 	bl	80048b0 <memcpy>
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff fbbf 	bl	80040a4 <_free_r>
 8004926:	e7f1      	b.n	800490c <_realloc_r+0x40>

08004928 <_malloc_usable_size_r>:
 8004928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800492c:	1f18      	subs	r0, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	bfbc      	itt	lt
 8004932:	580b      	ldrlt	r3, [r1, r0]
 8004934:	18c0      	addlt	r0, r0, r3
 8004936:	4770      	bx	lr

08004938 <_init>:
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493a:	bf00      	nop
 800493c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493e:	bc08      	pop	{r3}
 8004940:	469e      	mov	lr, r3
 8004942:	4770      	bx	lr

08004944 <_fini>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr
